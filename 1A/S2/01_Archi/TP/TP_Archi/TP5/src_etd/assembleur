eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}' # -*-perl-*-
& eval 'exec perl -S $0 $argv:q'
if 0;
#----
use strict;

# quick and dirty implementation of an assembleur for the project.

my $activate_debug = 0;
sub debug {
	if ($activate_debug) {
		my $arg = shift;
		print $arg;
	}
}
my $pass = 0;
my %ops = (
		"add"  => "100", 
		"sub"  => "101", 
		"and"  => "010", 
		"or"   => "000", 
		"xor"  => "001", 
		"not"  => "01100", 
		"shl"   => "11000", 
		"shr"   => "11100", 
		);

my %ldst = (
		"ld"  => "10", 
		"st"  => "11", 
		);

my %jump = (
		"jmp"  => "00", 
		"jz"  => "01", 
		"jc"  => "10", 
		);
my %etiquette;

my $source = $ARGV[0];

my $ad = 0;
my $etad = 16384;
my $all_instructions = "";
sub print_inst {
	my $inst = shift;
	my $original = shift;
	my $strad = sprintf("%02d", $ad);
	my $progad = sprintf("%4X", $ad+16384 );
#	$all_instructions .= "$progad$inst // $original\n";
#	$all_instructions .= "$inst // $original\n";
	$all_instructions .= "$inst\n";
	$ad++;
}

sub report_error {
	my $lineno = shift;
	my $msg = shift;
	print stderr "$source:$lineno: $msg\n";
	exit 1;
}

my $regname = "r[0-3]";

sub parse_inst {
	my $inst;
	if (/^([^ ]+) ($regname),($regname)$/) {
		$inst = {
			op => $1,
			regs => [reg_to_bin($2), reg_to_bin($3)],
		}
	} elsif (/^([^ ]+) ($regname)$/) {
		$inst = {
			op => $1,
			regs => [reg_to_bin($2)],
		}
	} elsif (/^([^ ]+) 0?[xX]([0-9a-fA-F]{2})([0-9a-fA-F]{2}),($regname)$/) {
		$inst = {
			op => $1,
			regs => [reg_to_bin($4)],
			ADH=> $2,
			ADL=> $3,
		}  
	} elsif (/^([^ ]+) ($regname),0?[xX]([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/) {
		$inst = {
			op => $1,
			regs => [reg_to_bin($2)],
			ADH=> $3,
			ADL=> $4,
		}
	} elsif (/^([^ ]+):$/) {
		if ($pass ==0) {
$etiquette{$1}=sprintf("%04X",$etad);
}
		$inst = {
			op => "eti",
		}
	} elsif (/^([^ ]+) ([a-zA-Z0-9_]*)$/) {
		$inst = {
			op => $1,
			ADH=> substr($etiquette{$2},0,2),
			ADL=> substr($etiquette{$2},2,2),
		}
	} elsif (/^([^ ]+) 0?[xX]([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/) {
			$inst = {
				op => $1,
				ADH=> $2,
				ADL=> $3,
			} 
   } elsif (/^([^ ]+) ([0-9]+),($regname)$/) {
				$inst = {
					op => $1,
					immediate => $2,
					regs => [reg_to_bin($3)],
				}
			} else {
				&report_error($., "Unrecognized instruction format: $_");
			}
			debug "op=".$inst->{op}."; regs=".$inst->{regs}[0].",".$inst->{regs}[1];
			return $inst;
}

sub next_instruction {
	my $original;
	my $inst;
	while (<INPUT>) {
		debug "-- raw: $_";
		s/\n//;
# strip comments
		s/#.*//;
		$original = $_;
# normalize spaces
		s/ +/ /g;
		s/ *, */,/g;
		s/^ *//;
		s/ *$//;
		$_ = lc $_;
		debug "-- normalized: $_\n";
		if (/./) {
			$inst = &parse_inst($_);
			$inst->{original} = $original;
			$inst->{line} = $.;
			return $inst;
		}
	}
	return 0;
}

sub check_reg {
	my $expected = shift;
	my $inst = shift;
	my @regs=@{ $inst->{regs} };
	my $actual = scalar @regs;
	if ($actual != $expected) {
		&report_error($inst->{line}, "$expected register expected, got $actual ($inst->{original})");
	}
}



sub check_no_immediate {
	my $inst = shift;
	if ($inst->{immediate}) {
		&report_error($inst->{line}, "Unexpected immediate value $inst->{immediate} (in $inst->{original})");
	}
}

sub reg_to_bin {
	my $reg = shift;
	if ($reg =~ /^r[0-3]*/) {
		$reg =~ s/r0/00/;
		$reg =~ s/r1/01/;
		$reg =~ s/r2/10/;
		$reg =~ s/r3/11/;
		return $reg;
	} else {
		&report_error($., "Invalid register $reg");
	}
}
sub bin2dec {
	unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
}
sub bin2hex {
	return sprintf("%02X", bin2dec(shift));
}

sub assemble {
	&preassemble();
$pass=1;
my $c;
my $v;
while (($c,$v) = each(%etiquette)) {
  debug "Cle : $c, Valeur : $v\n";
}
	open(INPUT, $source);
	my $inst;
	while ($inst = &next_instruction ()) {
		my $op = $inst->{op};

		my $r1 = $inst->{regs}[0];
		my $r2 = $inst->{regs}[1];
		my $imm = $inst->{immediate};
		my $all_registres = $r1 . $r2 ;
		my $orig = $inst->{original};

		debug "in while, op=$op\n";
		debug $ops{$op}, "\n";

		my $operation = $ops{$op};
		my $loadstore = $ldst{$op};
		my $saut = $jump{$op};
		if ($operation) {
			if ($op eq "not" or $op =~ /^sh[rl]$/) {
				&check_reg(1, $inst);
				&check_no_immediate($inst);
			} else {
				&check_reg(2, $inst);
				&check_no_immediate($inst);
			}
			&print_inst(bin2hex("0" . $operation . $all_registres), $orig);
		} elsif ($loadstore) {
			&check_reg(1, $inst);
			&check_no_immediate($inst);
			&print_inst(bin2hex($loadstore."0000" . $all_registres), $orig);
			&print_inst($inst->{ADH} ," ");
			&print_inst($inst->{ADL} ," ");
		} elsif ($saut) {
			&check_reg(0, $inst);
			&check_no_immediate($inst);
			&print_inst(bin2hex("100001" . $saut), $orig);
			&print_inst($inst->{ADH} ," ");
			&print_inst($inst->{ADL} ," ");
		} elsif ($op eq "eti") {
		} elsif ($op eq "li") {
			&check_reg(1, $inst);
			&print_inst(bin2hex("101000" . $r1), $orig);
			&print_inst(sprintf("%02X", $imm) ," ");
		} else {
			&report_error ($inst->{line}, "unknown codop \"$op\".");
		}
	}
	close(INPUT);
}
sub preassemble {
	open(INPUT, $source);
	my $inst;
	while ($inst = &next_instruction ()) {
		my $op = $inst->{op};
# registers, as they appear on the command line. (do not
# necessarily correspond to rd,ra,rb in this order, depending on
# the instruction).
		my $r1 = $inst->{regs}[0];
		my $r2 = $inst->{regs}[1];
		my $imm = $inst->{immediate};
		my $all_registres = $r1 . $r2 ;
		my $orig = $inst->{original};

		debug "in while, op=$op\n";
		debug $ops{$op}, "\n";

		my $operation = $ops{$op};
		my $loadstore = $ldst{$op};
		my $saut = $jump{$op};
		if ($operation) {
			$etad++;
		} elsif ($loadstore) {
			$etad+=3;
		} elsif ($saut) {
			$etad+=3;
		} elsif ($op eq "eti") {
		} elsif ($op eq "li") {
			$etad+=2;
		} else {
			&report_error ($inst->{line}, "unknown codop \"$op\".");
		}
	}
	close(INPUT);
}

&assemble();

open(OUTPUT, ">boot_defaut.mem");

print OUTPUT "\@1000\n$all_instructions";
close(OUTPUT);

