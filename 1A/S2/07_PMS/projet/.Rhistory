5+5
"hellofucking w"
for (x in 1:10) {
print(x)
}
"hello"
for (x in 1:10) {
print(x)
}
p
x<-c(12,14,24,25,67,78,67,78)
plot(edcf(x))
edcf <- function(x,y) {}
edcf <- function(x,y) {}
edcf <- function(x,y) {return(x+y)}
edcf(1,2)
seq(1:9)
plot(c(1,2,3,4),log(1-seq(1:4)/10))
abline(v=0)
abline(h=0)
norm(1)
clear
clear()
help()
qnorm(1)
qnorm(seq(1:9)/10)
test.R
a
source("C:/Users/DELL 7280/Desktop/test.R")
help(nrom)
help(rnorm)
rnorm(1000)
plot(seq(1:1000,rnorm(1000))
2+2
2+2
cls
clear
demo()
plot(2:12)
2+1
pie(c(2,3,4,5,2,2))
2+1
plot(2:12)
pie(c(2,3,4,5,2,2))
source(script1_r.R)
pwd
path
cd Desktop
2+1
plot(2:12)
l <- 12:20
l2 <-12:20
plot(l,l2)
pie(c(2,3,4,5,2,2))
plot(l,l2)
plot(l,l2,col="red")
carre <- function(x)
{
return x**2
carre <- function(x)
{
return(x**2)
}
plot(seq(1,20,1),carre(seq(1,20,1)))
c <- 24 : 50
c
hist(c,braeks=seq(24,50,5))
legend("topleft",c("red"),c("histo"),title="legende")
legend("topleft",c("red"),c("histo"),title="legende",box.lty=0)
legend("topleft",fill=c("red"),c("histo"),title="legende",box.lty=0)
hist(c,braeks=seq(24,50,5), col="red")
hist(c,braeks=seq(24,50,5), col="white")
hist(c,braeks=seq(24,50,5), col="black")
hist(c,braeks=seq(24,50,5), col="grey")
hist(c,braeks=seq(24,50,5), col="grey",col.axis="red")
hist(c,braeks=seq(24,50,5), col="grey",col.lab="red")
hist(c,braeks=seq(24,50,5), col="grey",border="red")
hist(c,braeks=seq(24,50,5), col="grey",col.main="red")
plot(c)
plot(c,cex=0.80)
plot(c,cex=2)
plot(c,cex=2,pch=20)
plot(c,cex=0.5,pch=20)
plot(c,cex=0.8,pch=20)
a
mon_fonc <- function(x,y)
{
return(x+y)
}
a <- mon_fonc(2,3)
a
for(i in  1:3)
{
cat("Bonjour \n")
}
p
getwd()
ln(1)
log(10)
log(1)
log(e)
log(math.e)
cuvre(dnorm(0,1),-12,12,col="blue")
cuvre(dnorm(20:45,0,1),-12,12,col="blue")
cuvre(dnorm(x,0,1),-12,12,col="blue")
plot(dnorm(0,1),-12,12,col="blue")
plot(dnorm(0,1),xlim=c(-12,12),col="blue")
plot(dnorm,xlim=c(-12,12),col="blue")
plot(dnorm(x,0,1),xlim=c(-12,12),col="blue")
plot(pnorm,xlim=c(-12,12),col="blue")
plot(qnorm,xlim=c(-12,12),col="blue")
plot(qnorm,ylim=c(-12,12),col="blue")
pnorm(1)
1-porm(1)
1-pnorm(1)
source("C:/Users/DELL 7280/Desktop/ENSIMAG_1/S2/PMS/langage R/script1_r.R")
source("C:/Users/DELL 7280/Desktop/ENSIMAG_1/S2/PMS/langage R/script1_r.R")
hist(lt,prob=T,breaks=seq(a0,ak,h))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,10))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
# histogramme à classe de meme effectif
bornes <- c(a0,quantile(lt,seq(1,k)/k),aK)
# histogramme à classe de meme effectif
bornes <- c(a0,quantile(lt,seq(1,k)/k),ak)
bornes
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
# reprsentaion de deux histo dans le meme graphe
par=(mfcol=c(1,2))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
# reprsentaion de deux histo dans le meme graphe
par=(mfcol=c(1,2))
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
# histogramme à classe de meme effectif
bornes <- c(a0,quantile(lt,seq(1,k-1)/k),ak)
hist(lt,prob=T,breaks=bornes,col="red",main="histo de tremb ",ylim=c(0,5))
# Question2
plot(dnorm)
# Question2
plot(dunif)
# Question2
plot(dunif,xlim=c(-5,5))
# graphe de probabilites de loi puissance Pu(t,c)
plot(lt,log(seq(1,n)/n),col="green")
# Feuille 2
# Preleminiare
rnorm(20)
# Feuille 2
# Preleminiare
plot(rnorm(20))
# Feuille 2
# Preleminiare
plot(rnorm(1000))
plot(dnorm(mean=2,sd=1))
plot(dnorm(seq(1,30),mean=2,sd=1))
plot(dnorm(-30:30,mean=2,sd=1))
# Feuille 2
# Preleminiare
par=(mfcol=c(1,2))
# Feuille 2
# Preleminiare
par=(mfcol=c(1,2))
plot(rnorm(1000))
plot(dnorm(-30:30,mean=2,sd=1))
plot(dnorm(-1000:1000,mean=2,sd=1))
plot(dnorm(-100:100,mean=2,sd=1))
plot(rnorm(1000))
plot(rnorm(1000,mean=2,sd=1))
plot(bruit)
# Feuille2 exo1
bruit <- c(54.8 ,55.4 ,57.7 ,59.6 ,60.1 ,61.2 ,62.0 ,63.1 ,63.5 ,64.2,65.2 ,65.4 ,65.9 ,66.0 ,67.6 ,68.1 ,69.5 ,70.6, 71.5 ,73.4)
plot(bruit)
summary(bruit)
sd(bruit)
coef <- (sd(bruit)^2)/mean(bruit)
coef
coef <- (sd(bruit))/mean(bruit)
coef
# hsito à classe de meme largeur
lt <- sort(bruit)
n <- length(l)
k <- round(1+log2(n))
diff <- lt[n]-lt[1]
a0 <- lt[1] -0.025*diff
ak <- lt[n]+0.025*diff
h <- (ak - a0)/k
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de tremb ",ylim=c(0,5))
bruit
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de bruit ")
k <- 5
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de bruit ")
# hsito à classe de meme largeur
lt <- sort(bruit)
n <- length(l)
k <- 5
diff <- lt[n]-lt[1]
a0 <- lt[1] -0.025*diff
ak <- lt[n]+0.025*diff
h <- (ak - a0)/k
hist(lt,prob=T,breaks=seq(a0,ak,h),col="blue",main="histo de bruit ")
# hsito à classe de meme largeur
lt <- sort(bruit)
n <- length(l)
k <- 5
diff <- lt[n]-lt[1]
a0 <- lt[1] -0.025*diff
a5 <- lt[n]+0.025*diff
h <- (ak - a0)/k
bornes <- seq(a0, a5, (a5 - a0) / 5)
hist(lt,prob=T,breaks=bornes,col="blue",main="histo de bruit ")
hist(lt,prob=T,col="blue",main="histo de bruit ")
# hisrto a classe de meme effetcife
bornes <- c(a0, quantile(bruit,seq(1,4)/5),a5)
hist(bruit,breaks=bornes , prob=T,col="red")
# hisrto a classe de meme effetcife
bornes <- c(a0, quantile(bruit,seq(1,5)/5),a5)
hist(bruit,breaks=bornes , prob=T,col="red")
# hisrto a classe de meme effetcife
bornes <- c(a0, quantile(bruit,seq(1/5,4/5,1/5)),a5)
hist(bruit,breaks=bornes , prob=T,col="red")
hist(bruit , prob=T,col="red")
# graphes des probabilites
plot(bruit,qnorm(seq(1,n-1)/n))
# graphes des probabilites
plot(bruit,qnorm(seq(1,n)/n))
# graphes des probabilites
plot(bruit,qnorm(seq(1,n)/n))
# graphes des probabilites
plot(bruit,qnorm(seq(1,n)/n))
# graphes des probabilites
plot(bruit,qnorm(seq(1,n)/n))
n <- length(bruit)
# graphes des probabilites
plot(bruit,qnorm(seq(1,n)/n))
qqnorm(bruit)
# question 3_b
p <- 1-pnorm(70,mean=m,sd=sd(bruit))
# question 3
# question 3_a
# Estime mean et sd de loi Normale modilisant cet pb
m <- mean(bruit)
var <- var(bruit)
m
var
# question 3_b
p <- 1-pnorm(70,mean=m,sd=sd(bruit))
p
# question 3_b
p1 <- 1-pnorm(70,mean=m,sd=sd(bruit))
p2 <- 1-pnorm(74,mean=m,sd=sd(bruit))
p1
p2
# Question 3_c
qnorm(0.9,m,sd=sd(bruit))
#question 4
# Estimation de lambdea
lambda <- 1/mean(bruit)
lambda
p1 <- 1-pexp(70,lambda)
p2 <- 1-pexp(74,lambde )
p2 <- 1-pexp(74,lambda )
p1
p2
qnorm(0.9,lambda)
qexp(0.9,lambda)
#Question 5
p1 <- 1 - ecdf(bruit)(70)
p2 <- 1 - ecdf(bruit)(74)
p1
p2
quantile(bruit,0.9)
a <- -n
b<- 10
plot(10:20,a*seq(10,20)+b)
a <-  1-n
plot(10:20,a*seq(10,20)+b)
a <-  4-n
plot(10:20,a*seq(10,20)+b)
a <-  n
plot(10:20,a*seq(10,20)+b)
a <- 1
plot(10:20,a*seq(10,20)+b)
a <- 4
plot(10:20,a*seq(10,20)+b)
# dans ce fichier on implente qq methode de regression linéaire
x<-c(.516 ,0.887 ,0.783 ,0.613 ,0.697 ,0.459 ,0.724 ,0.755
,0.867 ,0.893, 0.835 ,0.718 ,0.851 ,0.386, 0.855)
n<-length(x)
# on desine le graphe de proba de loi de puissannce (dans TD1)
abs <- log(x)[1:n-1]
ord<-log(seq(1,n-1)/n)
plot(abs,ord)
# on desine le graphe de proba de loi de puissannce (dans TD1)
abs <- log(x)
ord<-log(seq(1,n)/n)
plot(abs,ord)
ord<-log(seq(1:n)/n)
plot(abs,ord)
# Création du vecteur des données.
tremb<-c(0.516, 0.887, 0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
# Création du vecteur des données.
tremb<-c(0.516, 0.887, 0.783, 0.613, 0.697, 0.459, 0.724, 0.755, 0.867, 0.893, 0.835, 0.718, 0.851, 0.386, 0.855)
# Taille du vecteur.
n<-length(tremb)
# on desine le graphe de proba de loi de puissannce (dans TD1)
abs <- log(sort(x))
ord<-log(seq(1:n)/n)
plot(abs,ord)
# regression linéare
reg <- lm(ord~abs)
summary(reg)
b <- reg$coefficients[1]
b
c <- reg$coefficients[2]
c
d <- reg$coefficients[3]
d
# pramétre theta
b <- reg$coefficients[1]
theta <- exp(-b/reg$coefficients[2])
theta <- exp(-b/reg$coefficients[2])
theta
# paramétre c de la loi de puissance
c <- reg$coefficients[2]
c
source("C:/Users/DELL 7280/Desktop/ENSIMAG_1/S2/PMS/td/Fiche1/regression.R")
# on desine la dte de regrresion
plot(x,fitted.values(reg))
# regression linéare
reg <- lm(ord~abs)
summary(reg)
# pramétre theta
b <- reg$coefficients[1]
theta <- exp(-b/reg$coefficients[2])
theta
# paramétre c de la loi de puissance
c <- reg$coefficients[2]
c
# on desine la dte de regrresion
plot(x,fitted.values(reg))
# on desine la dte de regrresion
lines(x,fitted.values(reg))
# on desine la dte de regrresion
plot(sort(x),fitted.values(reg))
lines(sort(x),fitted.values(reg))
plot(ecdf(bruit))
getwd()
setwd(" C:\Users\DELL 7280\Desktop\ENSIMAG_1\S2\PMS\projet")
setwd(" C:/Users/DELL 7280/Desktop/ENSIMAG_1/S2/PMS/projet")
setwd(" C:/Users/DELL 7280/Desktop/ENSIMAG_1/S2/PMS/projet")
getwd()
setwd("C:/Users/DELL 7280/Desktop/ENSIMAG_1/S2/PMS/projet")
getwd()
# ceci est un fichier de Test
x <- c(1,2,3,4)
x
x[1:4]
x[1:3]
x[1:3]
x[1:3]
# ceci est un fichier de Test
x <- c(1,3,3,4)
x[1:3]
y<- seq(1,4)
y
y<- seq(1,4)/4
y
# ceci est un fichier de Test
x <- c(1,2,2,4)
x
t<-1/x
t
t<-1/(x[1:3])
t
sum(x)
rexp(10,lambda=0.5)
rexp(lambda=0.5)
rexp(lambda=0.5,10)
rnorm(10)
exp.test(x,conf.level=0.95)
t.test(x,conf.level=0.95)
ruinf(1,0,1)
runif(1,0,1)
# Pour simuler une loi de P(a,b) on simule la loi exp(a)
simulation <- function(a,b,n)
{
u <- ruinf(n,0,1) # on choisit
y <- -log(u)/a
x <- b*exp(y)
return x
# Pour simuler une loi de P(a,b) on simule la loi exp(a)
simulation <- function(a,b,n)
{
u <- ruinf(n,0,1) # on choisit
y <- -log(u)/a
x <- b*exp(y)
return(x)
}
# Test de notre fonction
l<-simulation(1,2,10)
l
# Pour simuler une loi de P(a,b) on simule la loi exp(a)
simulation <- function(a,b,n)
{
u <- runif(n,0,1) # on choisit
y <- -log(u)/a
x <- b*exp(y)
return(x)
}
# Test de notre fonction
l<-simulation(1,2,10)
l
xt <-sort(x)
plot(log(xt[1:n-1]),log(1-seq(1,n-1)/n),pch=20)
